<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[githubPages从hexo迁移至Jekyll]]></title>
    <url>%2F2019%2F09%2F03%2FgithubPages%E4%BB%8Ehexo%E8%BF%81%E7%A7%BB%E8%87%B3Jekyll%2F</url>
    <content type="text"><![CDATA[生命在于折腾，作者在实习结束后，由于hexo的特性，更换电脑需要重新配置，突发奇想抛掉所有的备份，只带上md文件重新搭建一个基于Jekyll的博客系统，是否能成功呢？1. 重新配置pc与GitHub的SSH连接2. 安装Jekyll(win10系统下)2.2 安装Ruby环境 首先点击下载Ruby Installer 通过命令行安装Jekyll and bundler gems 1gem install jekyll bundler 切换到你想要作为站点的地址 12cd 站点地址jekyll new 站点名 建立站点与服务器的连接 1bundle exec jekyll serve 若连接成功，则会如下图显示。Jekyll本地连接成功]]></content>
  </entry>
  <entry>
    <title><![CDATA[TWer诞生记]]></title>
    <url>%2F2019%2F09%2F03%2FTWer%E8%AF%9E%E7%94%9F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Spoiler warning：The intern Project in TW will be an experience that you can never forget.Custom TWI时间倒退回5月，TW组织实习学员在西安参与3天沉(da)浸(xing)式(hai)培(pa)训，作为骚窝首次实习生项目，很荣幸的迎来据说TWI有史以来最强大的明星讲师团，此处感谢陈锋、袁慎建、刘喆、王健、崔娇、孙晨等讲师的陪伴与教导🙏。在和讲师们吃吃喝喝、搭乐高、玩纸牌的过程中，我眼前似乎浮现培训团队在设计每一环节时不断推翻重演的过程，从用户故事到敏捷实践、扑克牌游戏到BA职能，能充分感受到团队背后的努力与投入。相比传统的填鸭式教育，这3天的培训让我建立了系统的敏捷开发方法论，也让我与其他的实习生小伙伴们建立了珍贵的同期友谊。记得那个与实习生小伙伴们酒店狼人杀的夜晚，作为一个隐蔽坑货属性的新手玩家，在一轮成功指证所有平民队友后，我不禁反复思考：这一切的背后到底是道德的沦丧，还是人性的扭曲？ 踏入TW6月下旬入职报道，完成“天龙八部”后开始熟悉组内成员和业务。组内都是经验丰富的开发者，刚开始时，会因为觉得大家都是非常优秀的人，我好像无法与之相比而产生胆怯与伤心。但TW人天生的热情与活力很有力的感染了我，每日集体觅食时间就是最效率的团建，大家交流story、聊聊日常、分享八卦，极大地缓解了我的紧张与局促。同时我的buddy和coach从TWI开始就紧密关注我的学习进度，制定详细而完备的学习计划，从每2天的switch pair，到每周的一份总结。这种多导师的全方位coach，让我能不停地从经验丰富的组员身上学到不同维度的技术实践。这短短两个月的实习，是将自己缺点和优点如实暴露的两个月，在陌生的技术栈和环境中，真的每天都暴风学习很多，身处的这个全栈team，让我能从学生时代老旧的技术块中抽离出来，站在更高的纬度认知敏捷开发和技术实践。在学校的时候，我始终摆脱不了学生的思想，学习也很片面，但在组里实习的这段日子，具体的看到技术使用场景，细细体会组员们的讲解后，深切的感受到了，原来这个技术是用来解决这个问题的啊。现在学习新技术时，我已不仅限于学习其操作和流程，而更愿意了解它的上下文，理清它的优点和适应性。有一句俗语：独行快，众行远。在TW的肩膀上，在最棒的场所最棒的机会中，能与最棒的人一起工作真的很荣幸，也很感谢TW能提供这样一个平台让即将毕业的学生们能一窥真正的职场和技术应用。感谢TW的所有工作人员们，是你们共同构建了一个友好、有料的平台；感谢我的组员们，谢谢你们理解我不安与局促的同时也欣赏我的积极与努力；感谢同期实习小伙伴们对我的帮助与关心，希望大家今后也不要忘记这段经历。]]></content>
      <categories>
        <category>实习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git操作指南]]></title>
    <url>%2F2019%2F09%2F03%2FGit%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[gitCheatSheet寻常操作查看此次修改内容：git diff查看提交日志：复杂版 ==&gt; git log; 简化版 ==&gt; git log –pretty=oneline版本回退查找历史版本：git reflog.版本回退/前进：git reset –hard 版本ID.HEAD:当前版本. HEAD^:上一个版本 撤销修改丢弃工作区(未add)修改：git checkout – file.丢弃暂存区(未commit)修改：git reset HEAD file丢弃版本库（未push至远程库）修改：版本回退。 删除文件/文件恢复删除文件：git rm file文件恢复：git checkout – file(用版本库里的版本替换工作区的版本,注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！) 分支管理查看分支：git branch创建+切换分支：git checkout -b name（不加-b纯切换）合并某分支到当前分支：git merge name删除分支：git branch -d name 解决冲突将git合并失败的文件手动编辑为希望的内容，再提交.查看分支合并图：git log –graph –pretty=oneline 分支管理‘fast forward’模式，合并删除分支后，会丢掉分支信息，看不出做过合并:git merge name.‘–no-ff’模式，merge时会生成新的commit，能看出做过合并:git merge –no-ff -m commit text name Bug分支修复bug ==&gt; 创建bug分支进行修复，然后合并删除该分支存储工作现场：git stash恢复工作现场：git stash apply（恢复不删除stash）;git stash pop（恢复并删除stash） feature分支开发新feature,最好新建分支强行丢弃未合并的分支：git branch -D name 团队开发1.git push origin branch-name 推送自己的修改；2.如果推送失败，则远程分支比你的本地更新，用git pull试图合并；3.如果合并有冲突，手动解决冲突，并在本地提交；4.冲突解决后，git push origin branch-name推送就能成功！（注意：如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to branch-name origin/branch-name） Rebase 干净、线性的提交历史，没有不必要的合并提交 ==&gt; git rebase 保存项目完整的历史，避免重写公共分支上的commit ==&gt; git merge 切到本地分支：git checkout local交互式rebase：git rebase -i HEAD~2 //合并两个普通rebase：git rebase master –&gt; 解决冲突 –&gt; git rebase –continue 标签管理新建标签：git tag ‘tagname’, 默认在HEAD新建，也可指定commit id指定标签信息：git tag -a ‘tagname’ -m ‘blablabla…’查看所有标签：git tag推送本地标签：git push origin ‘tagname’推送全部未推送过的本地标签：git push origin –tags删除本地标签：git tag -d ‘tagname’删除远程标签：先本地删，后git push origin :refs/tags/‘tagname’ 自定义Git忽略某些文件：.gitignore忽略文件的原则是： 忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。 配置命令简写：git config –global alias.co checkout 仓库Git配置文件都放在.git/config文件中用户Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中]]></content>
      <categories>
        <category>实习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Spike-github-blog]]></title>
    <url>%2F2019%2F09%2F03%2FSpike-github-blog%2F</url>
    <content type="text"><![CDATA[三种方案：Jekyll VS Hexo VS HugoJekyll官网: https://jekyllrb.com使用语言: Ruby支持的文件格式: html/md Pros: 把原文上传github，会自动帮你生成静态网站。 Github Pages天然支持Jekyll. 基于GitHub，安全性能较高 相对hexo而言，可以直接在github网页版上编辑和发布博客，PC间切换和同步非常方便。 Cons: 不支持在titles或者YAML使用变量. 不内置支持livereload 不内置支持post pagination Hexo官网：https://hexo.io/使用语言: NodeJS支持的文件格式: md Pros: 快 操作简单，命令少，易于记忆 使用主体为中国社区 Cons: 更换电脑则需重新安装环境 本地生成 html 再上传GitHub，部署需：one deploy command Hugo官网：https://gohugo.io/使用语言: Golang支持的文件格式: md Pros： 最快 内置 dynamic API driven 内置 unlimited content types、i18n、multiple output format 预置模版 Cons： 支持的插件少、扩展性不够 吸引于Hexo的简洁操作，下面介绍基于hexo搭建博客的流程：1. 环境准备 Node.js (Should be at least nodejs 6.9） Git2. Hello World2.1 Github上新建名为username.github.io的仓库并初始化2.2 安装Hexo1234npm install -g hexo-cli hexo init hexo g //生成 hexo s //启动服务 Hexo 2.3 在github.io仓库中创建index.html打开https://username.github.io/即可访问个人博客啦！HelloWorld 3. 自定义主题hexo官网自带主题库：https://hexo.io/themes/或GitHub自行查找主题，此处选用GitHub最火之next 3.1 下载主题12cd your-hexo-sitegit clone https://github.com/theme-next/hexo-theme-next themes/next 3.2 启用主题将Hexo文件夹下_config.yml 内的 theme 字段修改为next 3.3 选择Scheme目前NexT支持三种Scheme Muse – 默认 Scheme，黑白主调，大量留白 Mist – Muse 的紧凑版本，整洁有序的单栏外观 Pisces – 双栏 Scheme更改NexT文件夹下_config.yml文件，搜索scheme，将需要启用的 scheme 前面的注释 # 去除即可 3.4 设置语言更改NexT文件夹下_config.yml文件，搜索language，配置为：language: en 3.5 部署 修改_config.yml文件： 1234deploy: type: git repo: https://github.com/用户名/用户名.github.io.git branch: master 安装 hexo-deployer-git：npm install hexo-deployer-git –save 生成站点文件并推送至远程库，执行hexo clean &amp;&amp; hexo deploy 启动服务器hexo s 至此，你的个人博客就搭建好啦！！！ ##4. 参考文献https://www.techiediaries.com/jekyll-hugo-hexo/]]></content>
      <categories>
        <category>实习</category>
      </categories>
  </entry>
</search>
